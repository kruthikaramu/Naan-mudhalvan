# -*- coding: utf-8 -*-
"""EDUTUTOR AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQXIOTQHAIt_Z6MUejfeXHsn-OX_SCfB
"""

!pip install transformers torch gradio -q

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"

with gr.Blocks() as app:
    gr.Markdown("# üöÄ Educational AI Assistant")
    model_status = gr.Textbox(value="üîÑ Loading model...", interactive=False, show_label=False)

    try:
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            device_map="auto" if torch.cuda.is_available() else None
        )

        if tokenizer.pad_token is None:
            tokenizer.pad_token = tokenizer.eos_token

        model_status.value = "‚úÖ Model loaded successfully!"

    except Exception as e:
        model_status.value = f"‚ùå Error loading model: {str(e)}"

    def generate_response(prompt, max_length=512):
        try:
            inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
            if torch.cuda.is_available():
                inputs = {k: v.to(model.device) for k, v in inputs.items()}
            with torch.no_grad():
                outputs = model.generate(
                    **inputs,
                    max_length=max_length,
                    temperature=0.7,
                    do_sample=True,
                    pad_token_id=tokenizer.eos_token_id
                )
            response = tokenizer.decode(outputs[0], skip_special_tokens=True)
            # Return cleaned response
            return response.replace(prompt, "").strip()
        except Exception as e:
            return f"‚ö†Ô∏è Error: {str(e)}"

    def concept_explanation(concept):
        if not concept.strip():
            return "‚ö†Ô∏è Please enter a valid concept."
        prompt = f"Explain the concept of {concept} in detail with examples:"
        return generate_response(prompt, max_length=800)

    def quiz_generator(concept, num_questions):
        if not concept.strip():
            return "‚ö†Ô∏è Please enter a valid topic."
        prompt = (
            f"Generate {num_questions} quiz questions about {concept} with different question types "
            f"(multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
        )
        return generate_response(prompt, max_length=1200)

    def summarize_topic(topic):
        if not topic.strip():
            return "‚ö†Ô∏è Please enter text or a topic to summarize."
        prompt = f"Summarize the following topic or passage:\n\n{topic}\n\nSummary:"
        return generate_response(prompt, max_length=600)

    with gr.Tabs():
        with gr.TabItem("üìö Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., quantum computing")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.TabItem("‚ùì Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., renewable energy")
            num_questions = gr.Dropdown(choices=["3", "5", "7", "10"], label="Number of Questions", value="5")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions & Answers", lines=15)
            quiz_btn.click(quiz_generator, inputs=[quiz_input, num_questions], outputs=quiz_output)

        with gr.TabItem("üìù Summarizer"):
            summary_input = gr.Textbox(label="Enter topic or text to summarize", lines=4, placeholder="Paste your text here...")
            summary_btn = gr.Button("Summarize")
            summary_output = gr.Textbox(label="Summary", lines=8)
            summary_btn.click(summarize_topic, inputs=summary_input, outputs=summary_output)

app.launch(share=True)